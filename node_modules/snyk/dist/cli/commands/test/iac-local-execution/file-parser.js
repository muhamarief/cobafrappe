"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedFileTypeError = exports.tryParseIacFile = exports.parseFiles = void 0;
const kubernetes_parser_1 = require("./parsers/kubernetes-parser");
const terraform_file_parser_1 = require("./parsers/terraform-file-parser");
const terraform_plan_parser_1 = require("./parsers/terraform-plan-parser");
const path = require("path");
const types_1 = require("./types");
const analytics = require("../../../../lib/analytics");
const custom_error_1 = require("./../../../../lib/errors/custom-error");
async function parseFiles(filesData) {
    const parsedFiles = [];
    const failedFiles = [];
    for (const fileData of filesData) {
        try {
            parsedFiles.push(...tryParseIacFile(fileData));
        }
        catch (err) {
            if (filesData.length === 1)
                throw err;
            failedFiles.push(generateFailedParsedFile(fileData, err));
        }
    }
    return {
        parsedFiles,
        failedFiles,
    };
}
exports.parseFiles = parseFiles;
function generateFailedParsedFile({ fileType, filePath, fileContent }, err) {
    return {
        err,
        failureReason: err.message,
        fileType,
        filePath,
        fileContent,
        engineType: null,
        jsonContent: null,
    };
}
const TF_PLAN_NAME = 'tf-plan.json';
function tryParseIacFile(fileData) {
    analytics.add('iac-terraform-plan', false);
    switch (fileData.fileType) {
        case 'yaml':
        case 'yml':
        case 'json':
            // TODO: this is a temporary approach for the internal release only
            if (path.basename(fileData.filePath) === TF_PLAN_NAME) {
                analytics.add('iac-terraform-plan', true);
                return terraform_plan_parser_1.tryParsingTerraformPlan(fileData);
            }
            return kubernetes_parser_1.tryParsingKubernetesFile(fileData);
        case 'tf':
            return terraform_file_parser_1.tryParsingTerraformFile(fileData);
        default:
            throw new UnsupportedFileTypeError(fileData.fileType);
    }
}
exports.tryParseIacFile = tryParseIacFile;
class UnsupportedFileTypeError extends custom_error_1.CustomError {
    constructor(fileType) {
        super('Unsupported file extension');
        this.code = types_1.IaCErrorCodes.UnsupportedFileTypeError;
        this.userMessage = `Unable to process the file with extension ${fileType}. Supported file extensions are tf, yml, yaml & json.\nMore information can be found by running \`snyk iac test --help\` or through our documentation:\nhttps://support.snyk.io/hc/en-us/articles/360012429477-Test-your-Kubernetes-files-with-our-CLI-tool\nhttps://support.snyk.io/hc/en-us/articles/360013723877-Test-your-Terraform-files-with-our-CLI-tool`;
    }
}
exports.UnsupportedFileTypeError = UnsupportedFileTypeError;
//# sourceMappingURL=file-parser.js.map