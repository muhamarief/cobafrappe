"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUpgrades = void 0;
const calculate_relevant_fixes_1 = require("./calculate-relevant-fixes");
function generateUpgrades(requirements, updates, referenceFileInChanges) {
    // Lowercase the upgrades object. This might be overly defensive, given that
    // we control this input internally, but its a low cost guard rail. Outputs a
    // mapping of upgrade to -> from, instead of the nested upgradeTo object.
    const lowerCasedUpgrades = calculate_relevant_fixes_1.calculateRelevantFixes(requirements, updates, 'direct-upgrades');
    if (Object.keys(lowerCasedUpgrades).length === 0) {
        return {
            updatedRequirements: {},
            changes: [],
            appliedRemediation: [],
        };
    }
    const appliedRemediation = [];
    const changes = [];
    const updatedRequirements = {};
    requirements.map(({ name, originalName, versionComparator, version, originalText, extras, }) => {
        // Defensive patching; if any of these are undefined, return
        if (typeof name === 'undefined' ||
            typeof versionComparator === 'undefined' ||
            typeof version === 'undefined' ||
            originalText === '') {
            return;
        }
        // Check if we have an upgrade; if we do, replace the version string with
        // the upgrade, but keep the rest of the content
        const upgrade = Object.keys(lowerCasedUpgrades).filter((packageVersionUpgrade) => packageVersionUpgrade.startsWith(`${name.toLowerCase()}@${version}`))[0];
        if (!upgrade) {
            return;
        }
        const newVersion = lowerCasedUpgrades[upgrade].split('@')[1];
        const updatedRequirement = `${originalName}${versionComparator}${newVersion}`;
        changes.push({
            success: true,
            userMessage: `Upgraded ${originalName} from ${version} to ${newVersion}${referenceFileInChanges
                ? ` (upgraded in ${referenceFileInChanges})`
                : ''}`,
        });
        updatedRequirements[originalText] = `${updatedRequirement}${extras ? extras : ''}`;
        appliedRemediation.push(upgrade);
    });
    return {
        updatedRequirements,
        changes,
        appliedRemediation,
    };
}
exports.generateUpgrades = generateUpgrades;
//# sourceMappingURL=generate-upgrades.js.map