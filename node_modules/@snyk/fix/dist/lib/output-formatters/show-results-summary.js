"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateFailed = exports.calculateFixed = exports.generateFixedAndFailedSummary = exports.generateUnresolvedSummary = exports.generateSuccessfulFixesSummary = exports.showResultsSummary = exports.PADDING_SPACE = void 0;
const chalk = require("chalk");
const error_to_user_message_1 = require("../errors/error-to-user-message");
const format_successful_item_1 = require("./format-successful-item");
const format_unresolved_item_1 = require("./format-unresolved-item");
exports.PADDING_SPACE = '  '; // 2 spaces
async function showResultsSummary(resultsByPlugin, exceptionsByScanType) {
    const successfulFixesSummary = generateSuccessfulFixesSummary(resultsByPlugin);
    const unresolvedSummary = generateUnresolvedSummary(resultsByPlugin, exceptionsByScanType);
    const overallSummary = generateFixedAndFailedSummary(resultsByPlugin, exceptionsByScanType);
    return `${successfulFixesSummary}${unresolvedSummary ? `\n\n${unresolvedSummary}` : ''}\n\n${overallSummary}`;
}
exports.showResultsSummary = showResultsSummary;
function generateSuccessfulFixesSummary(resultsByPlugin) {
    const sectionTitle = 'Successful fixes:';
    const formattedTitleHeader = `${chalk.bold(sectionTitle)}`;
    let summary = '';
    for (const plugin of Object.keys(resultsByPlugin)) {
        const fixedSuccessfully = resultsByPlugin[plugin].succeeded;
        if (fixedSuccessfully.length > 0) {
            summary +=
                '\n\n' +
                    fixedSuccessfully
                        .map((s) => format_successful_item_1.formatChangesSummary(s.original, s.changes))
                        .join('\n\n');
        }
    }
    if (summary) {
        return formattedTitleHeader + summary;
    }
    return chalk.red('âœ– No successful fixes');
}
exports.generateSuccessfulFixesSummary = generateSuccessfulFixesSummary;
function generateUnresolvedSummary(resultsByPlugin, exceptionsByScanType) {
    const sectionTitle = 'Unresolved items:';
    const formattedTitleHeader = `${chalk.bold(sectionTitle)}`;
    let summary = '';
    for (const plugin of Object.keys(resultsByPlugin)) {
        const skipped = resultsByPlugin[plugin].skipped;
        if (skipped.length > 0) {
            summary +=
                '\n\n' +
                    skipped
                        .map((s) => format_unresolved_item_1.formatUnresolved(s.original, s.userMessage))
                        .join('\n\n');
        }
        const failed = resultsByPlugin[plugin].failed;
        if (failed.length > 0) {
            summary +=
                '\n\n' +
                    failed
                        .map((s) => format_unresolved_item_1.formatUnresolved(s.original, error_to_user_message_1.convertErrorToUserMessage(s.error)))
                        .join('\n\n');
        }
    }
    if (Object.keys(exceptionsByScanType).length) {
        for (const ecosystem of Object.keys(exceptionsByScanType)) {
            const unresolved = exceptionsByScanType[ecosystem];
            summary +=
                '\n\n' +
                    unresolved.originals
                        .map((s) => format_unresolved_item_1.formatUnresolved(s, unresolved.userMessage))
                        .join('\n\n');
        }
    }
    if (summary) {
        return formattedTitleHeader + summary;
    }
    return '';
}
exports.generateUnresolvedSummary = generateUnresolvedSummary;
function generateFixedAndFailedSummary(resultsByPlugin, exceptionsByScanType) {
    const sectionTitle = 'Summary:';
    const formattedTitleHeader = `${chalk.bold(sectionTitle)}`;
    const fixedItems = calculateFixed(resultsByPlugin);
    const failedItems = calculateFailed(resultsByPlugin, exceptionsByScanType);
    return `${formattedTitleHeader}\n\n${exports.PADDING_SPACE}${chalk.bold.red(failedItems)} items were not fixed\n${exports.PADDING_SPACE}${chalk.green.bold(fixedItems)} items were successfully fixed`;
}
exports.generateFixedAndFailedSummary = generateFixedAndFailedSummary;
function calculateFixed(resultsByPlugin) {
    let fixed = 0;
    for (const plugin of Object.keys(resultsByPlugin)) {
        fixed += resultsByPlugin[plugin].succeeded.length;
    }
    return fixed;
}
exports.calculateFixed = calculateFixed;
function calculateFailed(resultsByPlugin, exceptionsByScanType) {
    let failed = 0;
    for (const plugin of Object.keys(resultsByPlugin)) {
        const results = resultsByPlugin[plugin];
        failed += results.failed.length + results.skipped.length;
    }
    if (Object.keys(exceptionsByScanType).length) {
        for (const ecosystem of Object.keys(exceptionsByScanType)) {
            const unresolved = exceptionsByScanType[ecosystem];
            failed += unresolved.originals.length;
        }
    }
    return failed;
}
exports.calculateFailed = calculateFailed;
//# sourceMappingURL=show-results-summary.js.map